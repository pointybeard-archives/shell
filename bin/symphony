#!/usr/bin/env php
<?php

use Symphony\Shell\Lib;
use Symphony\Shell\Lib\Exceptions;
use pointybeard\ShellArgs\Lib as ShellArgs;

define('DOCROOT', rtrim(realpath(dirname(__FILE__) . '/../../../'), '/'));
define('DOMAIN', null);

// Emulate HTTP_HOST so defines.php doesn't throw a notice
putenv('HTTP_HOST=symphony.shell');
$_SERVER['HTTP_HOST'] = getenv('HTTP_HOST');

// Include symphony autoloader:
require_once DOCROOT . '/vendor/autoload.php';

// Include the Shell extension Composer autoloader
require_once __DIR__ . '/../vendor/autoload.php';

// Include the symphony boot script:
require_once DOCROOT . '/symphony/lib/boot/bundle.php';

// Include the Shell autoloader (for locating extensions and their commands)
Lib\CommandAutoloader::init();

try {

    // Make sure the Shell has been initialised
    $engine = Lib\Shell::instance();

    $args = new ShellArgs\ArgumentIterator();

    $command = null;
    $extension = null;

    if ($args->find(['c', 'command']) !== false) {
        list($extension, $command) = explode('/', $args->find(['c', 'command'])->value());
    } elseif ($args->find(['h', 'help', 'usage']) !== false) {
        echo "    usage: symphony [OPTION...] -c COMMAND [args]
    runs command provided via extension or workspace/bin.

    Should command be omitted, a list of commands available in the system will
    be provided instead.

    options:

        -c, --command
            The command you wish to run. This is a combination of the extension
            handle (e.g. shell), and the command in the /bin folder (e.g. test).

        -t, --token
            authentication token. Can be enabled via Symphony user
            profile. Not all extensions require authentication. Check
            individual extension commands for usage.

        -u, --username
            User for login. Instead of using -t, it is possible
            to be authenticated with username and password. If -u is
            specified, password will be prompted for.

    examples:
        symphony -t 4141e465 -c shell/test
        symphony -u fred --command=shell/test" . PHP_EOL;

        exit();
    } else {
        echo "Below is a list of all available commands. (use --usage for details on
executing individual commands):" . PHP_EOL . PHP_EOL;

        array_map(
            function ($c) { echo "   {$c}"  . PHP_EOL; return; },
            Lib\CommandAutoloader::fetch()
        );
        echo PHP_EOL;
        exit;
    }

    // Use has provided both -t and -u. This makes no sense.
    if ($args->find(['u', 'username']) !== false && $args->find(['t', 'token']) !== false) {
        throw new Exceptions\ShellException("Does not make sense to specify both -t and -u.");
    // Auhenticate by token
    } elseif ($args->find(['t', 'token']) !== false) {
        Lib\Shell::instance()->loginFromToken($args->find(['t', 'token'])->value());
        if (!Lib\Shell::instance()->isLoggedIn()) {
            throw new Exceptions\ShellException("Authentication token supplied was invalid.");
        }
    // Authenticate by usename and password prompt
    } elseif ($args->find(['u', 'username']) !== false) {
        $password = Lib\Utils::promptForInput("Password", true);

        Lib\Shell::instance()->login($args->find(['u', 'username'])->value(), $password);
        if (!Lib\Shell::instance()->isLoggedIn()) {
            throw new Exceptions\ShellException("Username and/or password were incorrect.");
        }
    }

    $path = EXTENSIONS . '/' . $extension . '/bin/'. $command;
    if ($path == __FILE__) {
        throw new Exceptions\ShellException("Cannot run 'symphony' as shell command.");
    } elseif (!file_exists($path) || !is_readable($path)) {
        throw new Exceptions\ShellException("Specified command file, '{$extension}/bin/{$command}', is either non-existent or unreadable.");
    }

    $class = "\Symphony\Shell\Command\\$extension\\$command";
    $obj = new $class;

    // User has specified a command, and wants usage for that command.
    if ($args->find(['h', 'help', 'usage']) !== false) {
        echo $obj->usage() . PHP_EOL;
        exit;
    }

    // Check if this command requires authentication to use.
    if ($obj instanceof Lib\AuthenticatedCommand) {
        try {
            $obj->authenticate();
        } catch (Exceptions\AuthenticationRequiredException $e) {
            // Rethrow this as a ShellException, which is caught later on
            throw new Exceptions\ShellException($e->getMessage(), 0, $e);
        }
    }
} catch (Exceptions\ShellException $e) {
    Lib\Shell::error($e->getMessage());
}

// Finally run the command. Let it handle exceptions on its own though.
$obj->run();
